Τ.Ε.Διαδικτύου

Ομάδα:
Μαρία Καραμηνά (1115201600059)
Γιώργος Κουρσιούνης (1115201600077)



Back-end
Τεχνολογίες: Spring Framework σε IntelliJIDEA (Windows 10)

Παραδοχές:
1. Η σύνδεση κάποιου χρήστη γίνεται με username ή email και password και λαμβάνει ένα JSON Web Token (/auth/login).

2. Ο visitor δεν χρειάζεται token και μπορεί να έχει πρόσβαση μόνο σε συγκεκριμένα μέρη της εφαρμογής.

3. Κάθε User έχει ένα Account στο όποιο κάθε username/email είναι μοναδικό στην εφαρμογή.

4. Ο Administrator είναι επίσης και χρήστης (δηλαδή μπορεί να κάνει sell/bid) πέραν των λειτουργιών που έχει κατά την εκφώνηση.

5. Ο admin μπορεί:
    - να δει τους χρήστες προς έγκριση (/admin/pendingRegisters)
    - να δει τη λίστα χρηστών (/admin/allUsers)
    - να κάνει verify όλους τους εκκρεμείς χρήστες (/admin/verifyAll)
    - να κάνει verify έναν μόνο χρήστη (/admin/verifyUser/{userId})
    - να δημιουργήσει μια νέα κατηγορία (/admin/newCategory/{categoryId})
    - να δει όλες τις δημοπρασίες σε XML η JSON (το front-end δημιουργεί το αρχείο) (/admin/allAuctions)
    - να διαγράψει έναν καινούργιο χρήστη αντί να τον κάνει verify (/admin/deleteUser/{userId})
    - να δει τις πληροφορίες ενός χρήστη (/user/{username})

6. Ένας χρήστης μπορεί:
    - να δει μια δημοπρασία (GET /item/{itemId}). Σε αυτή την περίπτωση καταγράφουμε την επισκεψή του
    - να δει όλες τις διαθέσιμες δημοπρασίες (/item/openAuctions)
    - να κάνει bid (/bid/makeBid/{itemId})
    - να δημιουργήσει ή τροποποιήσει ή διαγράψει δημοπρασία (POST /item, PATCH /item, DELETE /item)

7. Ως προς τον ίδιον τον χρήστη, μπορεί:
    - να δει τις ανοικτές του δημοπρασίες (/user/myOpenAuctions)
    - να δει τις ολοκληρωμένες του δημοπρασίες (/user/myCompletedAuctions)
    - να δει τα bids που έχει κάνει (/user/myBids)
    - να δει τα μηνύματα που έχει στείλει (/user/sentMessages) και έχει λάβει (/user/receivedMessages)
    - να στείλει μήνυμα στον Highest Bidder μιας δημοπρασίας του (/user/messageBidder/{itemId})
    - να λάβει μήνυμα από τον Seller μιας δημοπρασίας που έχει κερδίσει (/user/messageSeller/{itemId})
    - να διαγράψει ένα μήνυμα που έστειλε (/user/deleteMessage/{messId}). Τότε διαγράφεται και από 
    τον παραλήπτη. Επίσης όταν πατήσει και διαβάσει το μήνυμα τότε θεωρείται ότι 
    το έχει δει (/user/markMessage/{messId})
    - να κάνει rate μετά το πέρας μιας δημοπρασίας αν είναι Seller ή Highest Bidder (/user/rating/{itemId}).
    Έχουμε κλίμακα 1-5 η οποία μεταφράζεται σε -2/2 για να επιβραβέυουμε δίκαια ή να τιμωρούμε έναν 
    χρήστη ως προς την ποιότητα της δημοπρασίας του. Το rating μπορεί να υποβληθεί μόνο μια φορά 
    από κάθε μέρος

8. Στην αρχική σελίδα της εφαρμογής δεν εμφανίζουμε τις ολοκληρωμένες δημοπρασίες 

9. Ως προς το search:
    - μπορεί να αναζητήσει στην μπάρα αναζήτησης του front-end ελέυθερο κείμενο για κάθε λέξη του 
    οποίου βρίσκουμε τα items που γίνεται match. Έπειτα εφαρμόζουμε μέθοδο best-fit, δηλαδή πρώτα 
    στη λίστα τοποθετούμε τα items που εμφανίζονται περισσότερες φορές και άρα είναι περισσότερο 
    'κοντά' στην αναζήτηση και στο τέλος της λίστας τα items πιο είναι λιγότερο 'κοντά' στους όρους 
    της αναζήτησης. Συνεπώς, εμφανίζονται και items στα οποία να εμφανίζονται μεμονωμένοι όροι της
    αναζήτησης αλλά αυτά θα είναι στο τέλος της λίστας αποτελεσμάτων (/search/searchBar)
    - για να διευκολύνουμε τον χρήστη του παρέχουμε μια μέθοδο partial matching που επιστρέφει μια 
    λίστα από προτάσεις με τίτλους δημοπρασιών που περιέχουν τη λέξη/συλλαβή κλειδί 
    που πληκτρολόγησε (/search/partialMatch)
    - να κάνει εξειδικευμένη αναζήτηση προσδιορίζοντας προεραιτικά κατηγορία, χαμηλότερη τιμή, υψηλότερη
    τιμή, τίτλο τοποθεσία και περιγραφή. Όλες οι δοθείσες παράμετροι πρέπει να ισχύουν για να επιλεχθεί 
    μια δημοπρασία ως αποτέλεσμα

10. Bonus
    - με τη μέθοδο /recommend/xmlRead διαβάζουμε ένα αρχείο xml από το data-set. Επειδή είναι διαδικασία
    offline, δεν υπάρχει ανάλογο κουμπί στο front-end
    - με τη μέθοδο /recommend/visitor επιστρέφουμε τα 5 items στα οποία υπάρχουν τα περισσότερα bids και
    αφορά μόνο τους visitors
    - με τη μέθοδο /recommend/lsh προτείνουμε σε έναν εγγεγραμμένο χρήστη το πολύ 5 items που τα βρίσκουμε
    με LSH NN-CF. Για το lsh, χρησιμοποιούμε έτοιμη βιβλιοθήκη: https://github.com/tdebatty/java-LSH

11. Η εφαρμογή δημιουργεί ανά 5 δευτερόλεπτα ένα thread στο οποίο ελέγχονται οι χρόνοι λήξης των 
δημοπρασιών με τον τρέχοντα χρόνο και κλείνουν όσες πρέπει.

12. Χρησιμοποιούμε SSL self-signed certificate και για το back-end

13. Η βάση δεδομένων που χρησιμοποιούμε είναι η H2.

14. Οι κωδικοί πρόσβασης αποθηκεύονται στη βάση ως hashed με τη χρήση του Spring PasswordEncoder.

15. Η τοποθεσία των χρηστών είναι ίδια κλάση με την τοποθεσία των items και κάθε μια έχει latitude,
longitude και locationTitle. Τα δύο πρώτα είναι απαραίτητα για την επιτυχή καταχώρηση της τοποθεσίας.

16. Για το signup (/auth/signup) δεν επιτρέπεται username με δεσμευμένη λέξη πχ. user, item, account, 
login κτλ ούτε και email. Επίσης πρέπει να είναι 5-15 χαρακτήρες.

Extra υλοποιήσεις:
Ένας user μπορεί:
1. να άλλαξει το password του (/account/changePassword)
2. να δει το ιστορικό επίσκεψης του σε δημοπρασίες (/user/myHistory)
3. να λάβει notifications τα οποία μπορούν να είναι των εξής ειδών:
    - verification όταν κάποιος admin τον κάνει verified
    - ειδοποίηση ότι κέρδισε όταν είναι Highest Bidder μιας δημοπρασίας μετά την λήξη της
    - ειδοποίηση ότι μια δημοπρασία του οκοκληρώθηκε, όταν είναι seller
4. να δει τα unseen notifications (/user/unseenNotifications), να δει όλα τα notifications (/user/myNotifications), να επιλέξει ως 'seen' ένα 
(/user/markNotification/{notId}) ή όλα τα unseen notifications (/user/allSeen)



Front-end
Τεχνολογίες: React.js (Windows 10)

Παραδοχές:
1. Αρχικά στον φυλλομετρητή στέλνεται σελίδα login και μέσω σύνδεσης ο χρήστης ανακατευθύνεται στο HomePage

2. Ο επισκέπτης μπορεί να μεταβεί στο HomePage χωρίς σύνδεση μέσω κατάλληλου κουμπιού

3. Το login token αποθηκεύεται στο sessionStorage και έτσι ο χρήστης παραμένει συνδεδεμένος μόνο για τη διάρκεια του session

4. Ένας χρηστής που δεν έχει ακόμα εγκριθεί από τον διαχειριστή έχει τα ίδια δικαιώματα με έναν επισκέπτη.
Μόλις γίνει η έγκριση λαμβάνει ανάλογη ειδοποίηση από την οποία ανανεώνονται τα στοιχεία που είναι αποθηκευμένα στο session

5. Στην αρχική σελίδα ο χρήστης μπορεί να περιηγηθεί στις δημοπρασίες μέσω των φίλτρων ή της μπάρας
αναζήτησης. Στο δεξί μέρος της οθόνης εμφανίζονται στον χρήστη προτεινόμενες δημοπρασίες (bonus)

6. Τα αποτελέσματα από τα φίλτρα και την αναζήτηση έχουν δικό τους url ώστε να μπορεί να τα στείλει σε
κάποιον ή να επιστρέψει σε αυτά από επόμενη σελίδα

7. Πατώντας πάνω σε μια δημοπρασία ο χρήστης μεταβαίνει στη σελίδα της δημοπρασίας (/auctions/{itemId}) όπου
μπορεί να υποβάλλει προσφορές

8. Από την σελίδα της δημοπρασίας καθώς και από το preview της δημοπρασίας στην αρχική οθόνη ο χρήστης
μπορεί να διαγράψει ή να μεταβάλλει τις πληροφορίες της δημοπρασίας (εφόσον του ανήκει)

9. Στη σελίδα διαχείρισης δημοπρασιών (auction managment) ο χρήστης μπορεί να δει τις ανοιχτές/κλειστές του
δημοπρασίες, τις προσφορές του σε δημοπρασίες άλλων καθώς και τις δημοπρασίες 
που έχει επισκεφτεί

10. Ο διαχειριστής έχει πρόσβαση σε ό,τι και ο κοινός χρήστης καθώς και στη σελίδα διαχείρισης χρηστών
(/auction-managment), όπου μπορεί να δει τις αιτήσεις χρηστών όπου εκκρεμεί έγκριση και όλους τους
λογαρισμούς χρηστών. Επιπλέον ο διαχειριστής μπορεί να προσθέσει κατηγορίες (/createCategory) και να εξάγει
τις δημοπρασίες σε .xml και .json (όλες μαζί ή χωριστά)
11. Κάθε 5 δευτερόλεπτα γίνεται έλεγχος για νέα μηνύματα και ειδοποιήσεις και ο χρήστης ειδοποιείται
κατάλληλα μέσω εικονιδίων στο header

12. Θεωρείται πως υπάρχουν νέα μηνύματα όταν ο χρήστης δεν έχει διαβάσει το τελευταίο (σε ημερομηνία)
μήνυμα. Τα υπόλοιπα θεωρούνται αγνοημένα και άρα όχι καινούρια

13. Από το εικονίδιο μηνυμάτων, ο χρήστης μπορεί να μεταβεί στη σελίδα μηνυμάτων όπου μπορεί να δει τα
εισερχόμενα μηνύματα (/messages/inbox) καθώς και τα απεσταλμένα μηνύματα. Ο χρήστης μπορεί να διαγράψει ή να
απαντήσει σε ένα μήνυμα.

14. Μόλις τελειώσει μια δημοπρασία ο πωλητής και ο αγοραστής λαμβάνουν ανάλογη ειδοποίηση από όπου μπορούν
να μεταβούν στη σελίδα της δημοπρασίας και να την αξιολογήσουν ή να στείλουν μήνυμα στον πωλητή/αγοραστή

15. Στις σελίδες των δημοπρασιών (/auctions/{itemId}) καθώς και στη σελίδα εισερχόμενων μηνυμάτων
(/messages/inbox) το περιεχόμενο ανανεώνεται κάθε 5 δευτερόλεπτα για να μένει ενημερωμένο με τα στοιχεία
της βάσης

16. Μέσω του κουμπιού με το όνομα χρήστη στο header, ο χρήστης έχει τη δηνατότητα να αλλάξει τον κωδικό του
ή να αποσυνδεθεί από την εφαρμογή



Εκκίνηση: 

Front-end
Setup:
1. Download Node.js (https://nodejs.org/en/)
2. cd TED_frontend
3. npm install
Εκκίνηση: npm start μέσα από τον φάκελο TED_frontend
Στον φυλλομετρητή: https://localhost:3000

Back-end
1. Open as Project το pom.xml μέσα από το IntelliJIDEA
2. Το back-end εκκινείται από το src\main\java\com\Auctions\backEnd\BackEndApplication.java. Κατά την εκκίνηση,
δημιουργείται αν δεν υπάρχει ήδη ο admin με username:tediadiktyoy και password:adminadmin. Επιπλέον, πρέπει
ο χρήστης να αποδεχτεί στον browser το self-signed πιστοποιητικό μέσω του url: https://localhost:8443.

ΠΡΟΣΟΧΗ: Έχουμε αρχική κενή βάση και σε κάθε εκκίνηση της εφαρμογής η υπάρχουσα βάση θα διαγράφεται και γίνεται κενή. 
Ομως έχουμε συμπεριλάβει στο παραδοτέο και την μεγάλη βάση με 19926 items από το data-set. Σε
περίπτωση που επιθυμείτε να τρέξετε την έτοιμη βάση κάντε copy paste από το bidDb στο db (που τρέχει η βάση
της εφαρμογής). Αν θέλετε persistency αλλάξτε στο application.properties το spring.jpa.hibernate.ddl-auto
από create σε update. Τότε σε κάθε εκκίνηση της εφαρμογής η υπάρχουσα βάση θα εμπλουτίζεται. Επειδή
χρησιμοποιούμε H2 η μεγάλη βάση ενδεχομένως να καταναλώσει πολλή μνήμη.
